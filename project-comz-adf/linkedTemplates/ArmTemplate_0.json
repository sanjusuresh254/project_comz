{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "project-comz-adf"
		},
		"ls_blobstorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_blobstorage'"
		},
		"ls_gen2sink_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_gen2sink'"
		},
		"ls_gen2sink_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://saprojectcomzgen2.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_blobstorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_blobstorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_gen2sink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_gen2sink_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_gen2sink_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cleanedvisitorloggen2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_gen2sink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "visitorlogdata",
						"fileSystem": "cleaneddata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_gen2sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_userdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "userTable.csv",
						"container": "inputfile"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "UserID",
						"type": "String"
					},
					{
						"name": "Signup Date",
						"type": "String"
					},
					{
						"name": "User Segment",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_userdatagen2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_gen2sink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "userdata",
						"fileSystem": "cleaneddata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_gen2sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_visitorlog_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "VisitorLogsData.csv",
						"container": "inputfile"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "webClientID",
						"type": "String"
					},
					{
						"name": "VisitDateTime",
						"type": "String"
					},
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "UserID",
						"type": "String"
					},
					{
						"name": "Activity",
						"type": "String"
					},
					{
						"name": "Browser",
						"type": "String"
					},
					{
						"name": "OS",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_finalop')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_gen2sink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "input_feature",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_gen2sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_cleanVisitorLog')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_visitorlog_input",
								"type": "DatasetReference"
							},
							"name": "SourceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_cleanedvisitorloggen2",
								"type": "DatasetReference"
							},
							"name": "sinkcleaneddata"
						}
					],
					"transformations": [
						{
							"name": "FilterData"
						},
						{
							"name": "DerivedColumn"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\twebClientID as string,\n\t\tVisitDateTime as string,\n\t\tProductID as string,\n\t\tUserID as string,\n\t\tActivity as string,\n\t\tBrowser as string,\n\t\tOS as string,\n\t\tCity as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceData\nSourceData filter(not(isNull(UserID))) ~> FilterData\nFilterData derive(VisitDateTime = iif(length(VisitDateTime)==19,toDate(toString(toTimestamp(toLong(substring(VisitDateTime,1,13)),'yyyy-MM-dd'))),toDate(VisitDateTime,'yyyy-MM-dd')),\n\t\twebClientID = upper(trim(webClientID)),\n\t\tProductID = upper(trim(ProductID)),\n\t\tUserID = upper(trim(UserID)),\n\t\tActivity = upper(trim(Activity)),\n\t\tBrowser = upper(trim(Browser)),\n\t\tOS = upper(trim(OS)),\n\t\tCity = upper(trim(City)),\n\t\tCountry = upper(trim(Country))) ~> DerivedColumn\nDerivedColumn filter(between(toDate(toString(VisitDateTime)),toDate(\"2018-05-07\"),toDate(\"2018-05-27\"))) ~> Filter1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkcleaneddata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_visitorlog_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_cleanedvisitorloggen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_cleanuserdata')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_userdata",
								"type": "DatasetReference"
							},
							"name": "sourceUserdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_userdatagen2",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						}
					],
					"script": "source(output(\n\t\tUserID as string,\n\t\t{Signup Date} as string,\n\t\t{User Segment} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sourceUserdata\nsourceUserdata derive(UserID = trim(upper(UserID)),\n\t\t{User Segment} = trim(upper({User Segment})),\n\t\t{Signup Date} = toTimestamp ({Signup Date},'yyyy-MM-dd')) ~> DerivedColumn\nDerivedColumn sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_userdata')]",
				"[concat(variables('factoryId'), '/datasets/ds_userdatagen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_inputfeauture')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_userdatagen2",
								"type": "DatasetReference"
							},
							"name": "sourceipfeature"
						},
						{
							"dataset": {
								"referenceName": "ds_cleanedvisitorloggen2",
								"type": "DatasetReference"
							},
							"name": "vistorsource"
						},
						{
							"dataset": {
								"referenceName": "ds_cleanedvisitorloggen2",
								"type": "DatasetReference"
							},
							"name": "sourcevisitor"
						},
						{
							"dataset": {
								"referenceName": "ds_cleanedvisitorloggen2",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_cleanedvisitorloggen2",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "ds_cleanedvisitorloggen2",
								"type": "DatasetReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_finalop",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "AggNoofdaysVisited7Days"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "NoOfProductsViewed15Days"
						},
						{
							"name": "DerivedColumn"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "MostActiveOS"
						},
						{
							"name": "Window1"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "Select8"
						},
						{
							"name": "RecentlyViewedProduct"
						},
						{
							"name": "MostViewedproduct15Days"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Select9"
						},
						{
							"name": "Lookup2"
						},
						{
							"name": "Select10"
						},
						{
							"name": "Lookup3"
						},
						{
							"name": "Select11"
						},
						{
							"name": "Lookup4"
						},
						{
							"name": "Select12"
						},
						{
							"name": "Lookup5"
						},
						{
							"name": "SelectReqd"
						},
						{
							"name": "Window3"
						},
						{
							"name": "Filter7"
						}
					],
					"script": "source(output(\n\t\tUserID as string,\n\t\t{Signup Date} as date,\n\t\t{User Segment} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sourceipfeature\nsource(output(\n\t\twebClientID as string,\n\t\tVisitDateTime as date,\n\t\tProductID as string,\n\t\tUserID as string,\n\t\tActivity as string,\n\t\tBrowser as string,\n\t\tOS as string,\n\t\tCity as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> vistorsource\nsource(output(\n\t\twebClientID as string,\n\t\tVisitDateTime as date,\n\t\tProductID as string,\n\t\tUserID as string,\n\t\tActivity as string,\n\t\tBrowser as string,\n\t\tOS as string,\n\t\tCity as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sourcevisitor\nsource(output(\n\t\twebClientID as string,\n\t\tVisitDateTime as date,\n\t\tProductID as string,\n\t\tUserID as string,\n\t\tActivity as string,\n\t\tBrowser as string,\n\t\tOS as string,\n\t\tCity as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource(output(\n\t\twebClientID as string,\n\t\tVisitDateTime as timestamp,\n\t\tProductID as string,\n\t\tUserID as string,\n\t\tActivity as string,\n\t\tBrowser as string,\n\t\tOS as string,\n\t\tCity as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source2\nsource(output(\n\t\twebClientID as string,\n\t\tVisitDateTime as date,\n\t\tProductID as string,\n\t\tUserID as string,\n\t\tActivity as string,\n\t\tBrowser as string,\n\t\tOS as string,\n\t\tCity as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source3\nvistorsource select(mapColumn(\n\t\tVisitDateTime,\n\t\tUserID,\n\t\tActivity\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilter1 aggregate(groupBy(UserID),\n\tNo_of_days_Visited_7_Days = countDistinct(VisitDateTime),\n\t\tPageloads_last_7_days = sum(case(Activity==\"PAGELOAD\",1,0)),\n\t\tClicks_last_7_days = sum(case(Activity==\"CLICK\",1,0))) ~> AggNoofdaysVisited7Days\nSelect1 filter(VisitDateTime>toDate(\"2018-05-20\")) ~> Filter1\nsourcevisitor select(mapColumn(\n\t\tVisitDateTime,\n\t\tProductID,\n\t\tUserID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 filter(VisitDateTime>toDate(\"2018-05-12\")) ~> Filter2\nFilter2 aggregate(groupBy(UserID),\n\tNo_Of_Products_Viewed_15_Days = countDistinct(ProductID)) ~> NoOfProductsViewed15Days\nsourceipfeature derive(User_Vintage = minus(toDate(\"2018-05-08\"), {Signup Date})) ~> DerivedColumn\nsource1 select(mapColumn(\n\t\tVisitDateTime,\n\t\tProductID,\n\t\tUserID,\n\t\tActivity\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 filter(VisitDateTime>toDate(\"2018-05-12\")&&Activity==\"PAGELOAD\") ~> Filter3\nFilter3 aggregate(groupBy(UserID,\n\t\tProductID),\n\tcountproducts = count(ProductID),\n\t\tmaxvisitdatatime = max(VisitDateTime)) ~> Aggregate2\nsource2 select(mapColumn(\n\t\tUserID,\n\t\tOS,\n\t\tActivity\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4 aggregate(groupBy(UserID,\n\t\tOS),\n\tcountOS = count(OS)) ~> Aggregate3\nFilter7 select(mapColumn(\n\t\tUserID,\n\t\tMost_Active_OS = OS\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> MostActiveOS\nAggregate2 window(over(UserID),\n\tdesc(countproducts, true),\n\tdesc(maxvisitdatatime, true),\n\trank = rank()) ~> Window1\nWindow1 filter(rank==1) ~> Filter4\nFilter4 select(mapColumn(\n\t\tUserID,\n\t\tMost_Viewed_product_15_Days = ProductID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nsource3 select(mapColumn(\n\t\tVisitDateTime,\n\t\tProductID,\n\t\tUserID,\n\t\tActivity\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nFilter5 window(over(UserID),\n\tdesc(VisitDateTime, true),\n\tranks = rank()) ~> Window2\nSelect7 filter(Activity==\"PAGELOAD\") ~> Filter5\nWindow2 filter(ranks==1) ~> Filter6\nFilter6 select(mapColumn(\n\t\tRecently_Viewed_Product = ProductID,\n\t\tUserID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\nSelect8 derive(Recently_Viewed_Product = iif(isNull(Recently_Viewed_Product), \"Product101\",Recently_Viewed_Product)) ~> RecentlyViewedProduct\nSelect6 derive(Most_Viewed_product_15_Days = iif(isNull(Most_Viewed_product_15_Days), \"Product101\",Most_Viewed_product_15_Days)) ~> MostViewedproduct15Days\nDerivedColumn, AggNoofdaysVisited7Days lookup(sourceipfeature@UserID == AggNoofdaysVisited7Days@UserID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 select(mapColumn(\n\t\tMaster_userid = sourceipfeature@UserID,\n\t\tUser_Vintage,\n\t\tNo_of_days_Visited_7_Days,\n\t\tPageloads_last_7_days,\n\t\tClicks_last_7_days\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select9\nSelect9, NoOfProductsViewed15Days lookup(Master_userid == UserID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup2\nLookup2 select(mapColumn(\n\t\tMaster_userid,\n\t\tUser_Vintage,\n\t\tNo_of_days_Visited_7_Days,\n\t\tPageloads_last_7_days,\n\t\tClicks_last_7_days,\n\t\tNo_Of_Products_Viewed_15_Days\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select10\nSelect10, MostViewedproduct15Days lookup(Master_userid == UserID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup3\nLookup3 select(mapColumn(\n\t\tMaster_userid,\n\t\tUser_Vintage,\n\t\tNo_of_days_Visited_7_Days,\n\t\tPageloads_last_7_days,\n\t\tClicks_last_7_days,\n\t\tNo_Of_Products_Viewed_15_Days,\n\t\tMost_Viewed_product_15_Days\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select11\nSelect11, MostActiveOS lookup(Master_userid == UserID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup4\nLookup4 select(mapColumn(\n\t\tMaster_userid,\n\t\tUser_Vintage,\n\t\tNo_of_days_Visited_7_Days,\n\t\tPageloads_last_7_days,\n\t\tClicks_last_7_days,\n\t\tNo_Of_Products_Viewed_15_Days,\n\t\tMost_Viewed_product_15_Days,\n\t\tMost_Active_OS\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select12\nSelect12, RecentlyViewedProduct lookup(Master_userid == UserID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup5\nLookup5 select(mapColumn(\n\t\tUserID = Master_userid,\n\t\tNo_of_days_Visited_7_Days,\n\t\tNo_Of_Products_Viewed_15_Days,\n\t\tUser_Vintage,\n\t\tMost_Viewed_product_15_Days,\n\t\tMost_Active_OS,\n\t\tRecently_Viewed_Product,\n\t\tPageloads_last_7_days,\n\t\tClicks_last_7_days\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReqd\nAggregate3 window(over(UserID),\n\tdesc(countOS, true),\n\trownumber = rowNumber()) ~> Window3\nWindow3 filter(rownumber==1) ~> Filter7\nSelectReqd sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['solution'],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_userdatagen2')]",
				"[concat(variables('factoryId'), '/datasets/ds_cleanedvisitorloggen2')]",
				"[concat(variables('factoryId'), '/datasets/ds_finalop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_cleandata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow clean user data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_cleanuserdata",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceUserdata": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow visitor data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_cleanVisitorLog",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceData": {},
									"sinkcleaneddata": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_cleanuserdata')]",
				"[concat(variables('factoryId'), '/dataflows/df_cleanVisitorLog')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_output')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowoutput",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_inputfeauture",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceipfeature": {},
									"vistorsource": {},
									"sourcevisitor": {},
									"source1": {},
									"source2": {},
									"source3": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_inputfeauture')]"
			]
		}
	]
}